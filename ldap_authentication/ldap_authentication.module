<?php

/**
 * @file
 * This module injects itself into Drupal's Authentication stack.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\ldap_authentication\Controller\LoginValidator;
use Drupal\ldap_authentication\Helper\LdapAuthenticationConfiguration;
use Drupal\ldap_user\Helper\ExternalAuthenticationHelper;

/**
 * Implements hook_menu_alter().
 * since menu items are cached, only useful to add or alter callbacks
 * for ldap authentication driven menu items.
 * @deprecated
 */
function ldap_authentication_menu_alter(&$items) {
  // @FIXME: Unported.
  // Adds a menu tab (local task) to the user's page with a help text and goes to the ldapUserHelpLinkUrl.
  // This would normally be in ldap_authentication.links.yml but it has to be dynamic.
  if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkUrl')) {
    $items['user/ldaphelp'] = array(
      'title' => \Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkText'),
      'page callback' => 'drupal_goto',
      'page arguments' => array(\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkUrl')),
      'access callback' => 'ldap_authentication_show_ldap_help_link',
      'type' => MENU_LOCAL_TASK,
    );
  }
}


/**
 * TODO: Calling function unported.
 * @deprecated
 */
function ldap_authentication_show_ldap_help_link($user = NULL) {
  $user = \Drupal::currentUser();
  if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.authenticationMode') == LdapAuthenticationConfiguration::$mode_mixed) {
    return (ldap_authentication_ldap_authenticated($user));
  }
  elseif (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.authenticationMode') == LdapAuthenticationConfiguration::$mode_exclusive) {
    if ($user->isAnonymous() || ldap_authentication_ldap_authenticated($user)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Implements hook_help().
 */
function ldap_authentication_help($path, $arg) {

  $authentication_help = t('LDAP authentication allows authentication against an LDAP server. It may be used alongside other authentication means such as built in Drupal authentication, OpenID, etc.  More detailed help is available on drupal.org at !helplink.', [
    '%helplink' => \Drupal::l('http://drupal.org/node/997082', Url::fromUri('http://drupal.org/node/997082')),
  ]
  );
  switch ($path) {
    case 'admin/config/people/ldap/authentication':
    case 'admin/help#ldap_authentication':
      $output = '<p>' . $authentication_help . '</p>';
      return $output;
  }
}

/**
 *
 * @param int|User $user
 * @return bool true
 *   true if user is recorded as ldap authenticated and identified (ldap_authentified)
 * @deprecated
 */
function ldap_authentication_ldap_authenticated($user) {
  if (is_numeric($user)) {
    $user = @\Drupal::entityManager()->getStorage('user')->load((int) $user);
  }
  if (!is_object($user) || $user->id() == 0) {
    return FALSE;
  }
  $authname = ExternalAuthenticationHelper::getUserIdentifierFromMap($user->id());
  return !empty($authname);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ldap_authentication_form_user_pass_alter(&$form, $form_state) {
  // Add the LDAP user password validation before the user module's validation.
  array_unshift($form['#validate'], 'ldap_authentication_user_pass_validate');
}

/**
 * A validate handler on the login form.
 *
 * Check supplied username/password against local users table. If successful,
 * the UID from $form_state is set to the matching user ID.
 */
function ldap_authentication_core_override_user_login_authenticate_validate($form, FormStateInterface &$form_state) {
  // No additional validation of user credentials is needed when the uid is set.
  if (!empty($form_state->get('uid'))) {
    return;
  }

  $original_form = $form_state->getFormObject();
  $original_form->validateAuthentication($form, $form_state);
}

/**
 *
 */
function ldap_authentication_user_pass_validate(&$form, FormStateInterface $form_state) {
  $name_or_mail = trim($form_state->getValue('name'));
  $account = user_load_by_mail($name_or_mail);

  if (!$account) {
    $account = user_load_by_name($name_or_mail);
  }

  if ($account && ldap_authentication_ldap_authenticated($account)) {
    if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.passwordOption') != LdapAuthenticationConfiguration::$passwordFieldAllow) {
      if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkUrl')) {
        $helpLink = \Drupal::l(t(
          \Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkText')),
          Url::fromUri(\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkUrl')));
        $form_state->setErrorByName('name', t(
          'You may not reset your password here. You must reset your password via the directions at @link.',
          ['@link' => $helpLink])
        );
      }
      else {
        $form_state->setErrorByName('name', t('You may not reset your password here.  You must reset your password via one of your organization\'s password management sites.'));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter(). for user_form.
 *
 * Alter user editing form (profile form) based on ldap authentication configuration.
 *
 * @param array $form
 *   array from user profile.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   from user profile.
 */
function ldap_authentication_form_user_form_alter(&$form, FormStateInterface $form_state) {

  $user = $form_state->getBuildInfo()['callback_object']->getEntity();
  if (ldap_authentication_ldap_authenticated($user)) {
    if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.emailOption') == LdapAuthenticationConfiguration::$emailFieldRemove) {
      $form['account']['mail']['#type'] = 'hidden';
    }
    elseif (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.emailOption') == LdapAuthenticationConfiguration::$emailFieldDisable) {
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['mail']['#description'] = t('This email address is automatically set and may not be changed.');
    }
    elseif (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.emailOption') == LdapAuthenticationConfiguration::$emailFieldAllow) {
      // Email field is functional.
    }

    if (!LdapAuthenticationConfiguration::showPasswordField($user)) {
      if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.passwordOption') == LdapAuthenticationConfiguration::$passwordFieldHide) {
        $form['account']['current_pass']['#type'] = 'hidden';
        $form['account']['pass']['#type'] = 'hidden';
      }
      elseif (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.emailOption') == LdapAuthenticationConfiguration::$emailFieldDisable) {
        $form['account']['current_pass']['#disabled'] = TRUE;
        $form['account']['pass']['#disabled'] = TRUE;
        if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkUrl')) {
          $form['account']['current_pass']['#description'] = \Drupal::l(
            t(\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkText')),
            Url::fromUri(\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.ldapUserHelpLinkUrl'))
          );
        }
        else {
          $form['account']['current_pass']['#description'] = t('The password cannot be changed using this website.');
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter(). for user_login_form.
 */
function ldap_authentication_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _ldap_authentication_login_form_alter($form, $form_state, 'user_login');

}

/**
 * Implements hook_form_FORM_ID_alter(). for user_login_block.
 */
function ldap_authentication_form_user_login_block_alter(&$form, &$form_state) {
  _ldap_authentication_login_form_alter($form, $form_state, 'user_login_block');

}

/**
 * Validate function for user logon forms.
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function ldap_authentication_user_login_authenticate_validate($form, FormStateInterface &$form_state) {
  if ($form_state->getValue('pass') && $form_state->getValue('name')) {
    $validator = new LoginValidator();
    $form_state = $validator->validateLogin($form_state);
  }
}

/**
 * Helper function for ldap_authn_form_user_login_block_alter and ldap_authn_form_user_login_alter.
 *
 * @todo if form is being generated on non https and is set in preferences, set warning and end form development
 */
function _ldap_authentication_login_form_alter(&$form, &$form_state, $form_id) {

  if (!LdapAuthenticationConfiguration::hasEnabledAuthenticationServers()) {
    return;
  }

  /**
   * Add validate function to test for ldap authentication
   * should be placed after user_login_authenticate_validate
   * 1. user_login_name_validate
   * 2. user_login_authenticate_validate
   * 3. external authentication validate functions
   * 4. user_login_final_validate
   *
   * as articulated above user_login_default_validators() in user.module
   *
   * without any other external authentication modules, this array will start out as:
   *    array('user_login_name_validate', 'user_login_authenticate_validate', 'user_login_final_validate')
   */

  if (@in_array('::validateAuthentication', $form['#validate']) &&
    \Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.authenticationMode')) {
    $key = array_search('::validateAuthentication', $form['#validate']);
    $form['#validate'][$key] = 'ldap_authentication_core_override_user_login_authenticate_validate';
    array_splice($form['#validate'], $key + 1, 0, 'ldap_authentication_user_login_authenticate_validate');
  }

  _ldap_authentication_disable_http_check($form);

  // Add help information for entering in username/password.
  if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.loginUIUsernameTxt')) {
    $form['name']['#description'] = t(\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.loginUIUsernameTxt'));
  }
  if (\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.loginUIPasswordTxt')) {
    $form['pass']['#description'] = t(\Drupal::config('ldap_authentication.settings')->get('ldap_authentication_conf.loginUIPasswordTxt'));
  }
}

/**
 * Disable a logon form if ldap preferences exclude http logon forms.
 *
 * @param array $form
 *    drupal logon form.
 */
function _ldap_authentication_disable_http_check(&$form) {

  if (\Drupal::config('ldap_servers.settings')->get('require_ssl_for_credentials') == 1) {
    \Drupal::service('page_cache_kill_switch')->trigger();
    if (!\Drupal::request()->isSecure()) {
      $tokens = array(
        '%site_name' => \Drupal::config('system.site')->get('name'),
        '%site_contact_link' => \Drupal::config('system.site')->get('mail'),
      );

      if (empty($tokens['%site_contact_link'])) {
        $tokens['%site_contact_link'] = 'the site admin';
      }
      drupal_set_message(t('You are accessing %site_name using an unencrypted connection. For your security,
     %site_name only supports account logins using a secure protocol such as HTTPS. You can switch
     to HTTPS by trying to view this page again after changing the URL in your browser \'s
     location bar to begin with "https" instead of "http". Please contact
      %site_contact_link for help if this error continues.', $tokens), 'error');
      $form['#disabled'] = TRUE;
    }
  }
}
