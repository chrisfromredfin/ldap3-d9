<?php

/**
 * @file
 */

// FIXME: Dependency in ldap_query
define('LDAP_SCOPE_BASE', 1);
define('LDAP_SCOPE_ONELEVEL', 2);
define('LDAP_SCOPE_SUBTREE', 3);

// FIXME: Various dependencies.
define('LDAP_SERVERS_BIND_METHOD_SERVICE_ACCT', 1);
define('LDAP_SERVERS_BIND_METHOD_USER', 2);
define('LDAP_SERVERS_BIND_METHOD_ANON', 3);
define('LDAP_SERVERS_BIND_METHOD_ANON_USER', 4);
define('LDAP_SERVERS_BIND_METHOD_DEFAULT', 1);


use Drupal\Component\Utility\Unicode;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountProxy;
use Drupal\ldap_servers\ConversionHelper;
use \Drupal\ldap_servers\Entity\Server;
use Drupal\Core\Url;
use Drupal\ldap_servers\LdapTypes\AbstractType;
use Drupal\ldap_test\TestServer;
use Drupal\ldap_user\LdapUserConf;

class TokenHelper {
  use \Drupal\ldap_servers\TokenFunctions;
  // Temporary helper since TokenFunctions are a trait.
}

/**
 * Advertise the current ldap api version.
 */
function ldap_api_version() {
  return '2.0';
}

/**
 * Implements hook_cron().
 */
function ldap_servers_cron() {
  // If any modules implement hook_ldap_servers_user_cron().
  // user entity query to find most recent 100 entries that have not been processed
  // query for these and pass to modules implementing hook_ldap_server_maintenance()
  // update user field to have current date as date most recently checked.
}

/**
 * Get mixed case match from case insensitive search.
 *
 * @param string mixed case $key
 * @param array mixed case $array
 *
 * @return string matching key in mixed case or FALSE
 */
function ldap_server_find_key($key, $array) {
  $keys = array_combine(array_change_key_case($array), $array);
  if (isset($keys[Unicode::strtolower($key)])) {
    return $keys[Unicode::strtolower($key)];
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_ldap_attributes_needed_alter().
 */
function ldap_servers_ldap_attributes_needed_alter(&$attributes, $params) {
  $token_helper = new TokenHelper();
  // Force this data type.
  $attributes['dn'] = ldap_servers_set_attribute_map(@$attributes['dn'], 'ldap_dn');

  // Puid attributes are server specific.
  if ($params['sid'] && $params['sid']) {
    if (is_scalar($params['sid'])) {
      $ldap_server = ldap_servers_get_servers($params['sid'], 'enabled', TRUE);
    }
    else {
      $ldap_server = $params['sid'];
    }
    // mail, unique_persistent_attr, user_attr, mail_template, and user_dn_expression are needed for all functionality.
    if (!isset($attributes[$ldap_server->get('mail_attr')])) {
      $attributes[$ldap_server->get('mail_attr')] = ldap_servers_set_attribute_map();
    }
    if (!isset($attributes[$ldap_server->get('picture_attr')])) {
      $attributes[$ldap_server->get('picture_attr')] = ldap_servers_set_attribute_map();
    }
    if ($ldap_server->get('unique_persistent_attr') && !isset($attributes[$ldap_server->get('unique_persistent_attr')])) {
      $attributes[$ldap_server->get('unique_persistent_attr')] = ldap_servers_set_attribute_map();
    }
    if ($ldap_server->get('user_dn_expression')) {
      // @FIXME: Parameters don't match
      $token_helper->extractTokenAttributes($attributes, $ldap_server->get('user_dn_expression'), TRUE);
    }
    if ($ldap_server->get('mail_template')) {
      $token_helper->extractTokenAttributes($attributes, $ldap_server->get('mail_template'));
    }
    if (!isset($attributes[$ldap_server->get('user_attr')])) {
      $attributes[$ldap_server->get('user_attr')] = ldap_servers_set_attribute_map();
    }
  }
}

/**
 * Implements hook_ldap_user_attrs_list_alter().
 */
function ldap_servers_ldap_user_attrs_list_alter(&$available_user_attrs, &$params) {
  // debug('ldap_servers_ldap_user_attrs_list_alter'); debug($available_user_attrs); debug($params);
  if (isset($params['ldap_server']) && $params['ldap_server']) {
    /* @var Server $ldap_server */
    $ldap_server = $params['ldap_server'];
  }
  else {
    // Without a server id, ldap_servers module has nothing to offer.
    return;
  }
  $ldap_user_conf  = $params['ldap_user_conf'];
  $direction = $params['direction'];

  // @TO REMOVE
  // $tokens = array(
  //   '%edit_link' => l($ldap_server->editPath, $ldap_server->editPath),
  //   '%sid' => $ldap_server->sid,
  // );
  $url = Url::fromRoute('entity.ldap_server.collection');
  $tokens = array(
    '%edit_link' => \Drupal::l($url->toString(), $url),
    '%sid' => $ldap_server->id(),
  );

  $server_edit_path = 'admin/config/people/ldap/servers/edit/' . $ldap_server->id();

  if ($direction == LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER) {

    /** these 4 user fields indentify where in ldap and which ldap server they are associated with.
     * they are required for a Drupal account to be "ldap associated" regardless of if any other
     * fields/properties are provisioned or synched
    */

    if ($ldap_server->get('unique_persistent_attr')) {
      foreach (array(
        'field.ldap_user_puid_sid',
        'field.ldap_user_puid',
        'field.ldap_user_puid_property',
      ) as $i => $property_id) {
        $property_token = '[' . $property_id . ']';
        if (!isset($available_user_attrs[$property_token]) || !is_array($available_user_attrs[$property_token])) {
          $available_user_attrs[$property_token] = array();
        }
      }

      $available_user_attrs['[field.ldap_user_puid_sid]'] = array(
        'name' => t('Field: sid providing PUID'),
        'configurable_to_drupal' => 0,
        'configurable_to_ldap' => 1,
        'source' => t('%sid', $tokens),
        'notes' => 'not configurable',
        'direction' => LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER,
        'enabled' => TRUE,
        'prov_events' => array(LDAP_USER_EVENT_CREATE_DRUPAL_USER),
        'config_module' => 'ldap_servers',
        'prov_module' => 'ldap_user',
      ) + $available_user_attrs['[field.ldap_user_puid_sid]'];

      $available_user_attrs['[field.ldap_user_puid]'] = array(
        'name' => t('Field: PUID', $tokens),
        'configurable_to_drupal' => 0,
        'configurable_to_ldap' => 1,
        'source' => '[' . $ldap_server->get('unique_persistent_attr') . ']',
        'notes' => 'configure at ' . $server_edit_path,
        'convert' => $ldap_server->get('unique_persistent_attr_binary'),
        'direction' => LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER,
        'enabled' => TRUE,
        'prov_events' => array(LDAP_USER_EVENT_CREATE_DRUPAL_USER),
        'config_module' => 'ldap_servers',
        'prov_module' => 'ldap_user',
      ) + $available_user_attrs['[field.ldap_user_puid]'];

      $available_user_attrs['[field.ldap_user_puid_property]'] =
      array(
        'name' => t('Field: PUID Attribute', $tokens),
        'configurable_to_drupal' => 0,
        'configurable_to_ldap' => 1,
        'source' => $ldap_server->get('unique_persistent_attr') ,
        'notes' => 'configure at ' . $server_edit_path,
        'direction' => LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER,
        'enabled' => TRUE,
        'prov_events' => array(LDAP_USER_EVENT_CREATE_DRUPAL_USER),
        'config_module' => 'ldap_servers',
        'prov_module' => 'ldap_user',
      ) + $available_user_attrs['[field.ldap_user_puid_property]'];
    }

    $token = '[field.ldap_user_current_dn]';
    if (!isset($available_user_attrs[$token]) || !is_array($available_user_attrs[$token])) {
      $available_user_attrs[$token] = array();
    }
    $available_user_attrs[$token] =
    array(
      'name' => t('Field: Most Recent DN', $tokens),
      'configurable_to_drupal' => 0,
      'configurable_to_ldap' => 0,
      'source' => '[dn]',
      'notes' => 'not configurable',
      'direction' => LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER,
      'enabled' => TRUE,
      'prov_events' => array(LDAP_USER_EVENT_CREATE_DRUPAL_USER, LDAP_USER_EVENT_SYNCH_TO_DRUPAL_USER),
      'config_module' => 'ldap_servers',
      'prov_module' => 'ldap_user',
    ) + $available_user_attrs[$token];

    if ($ldap_user_conf->provisionsDrupalAccountsFromLdap) {
      if (!isset($available_user_attrs['[property.name]']) || !is_array($available_user_attrs['[property.name]'])) {
        $available_user_attrs['[property.name]'] = array();
      }
      $available_user_attrs['[property.name]'] = array(
        'name' => 'Property: Username',
        'source' => '[' . $ldap_server->get('user_attr') . ']',
        'direction' => LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER,
        'enabled' => TRUE,
        'prov_events' => array(LDAP_USER_EVENT_CREATE_DRUPAL_USER, LDAP_USER_EVENT_SYNCH_TO_DRUPAL_USER),
        'config_module' => 'ldap_servers',
        'prov_module' => 'ldap_user',
      ) + $available_user_attrs['[property.name]'];

      if (!isset($available_user_attrs['[property.mail]']) || !is_array($available_user_attrs['[property.mail]'])) {
        $available_user_attrs['[property.mail]'] = array();
      }
      $available_user_attrs['[property.mail]'] = array(
        'name' => 'Property: Email',
        'source' => ($ldap_server->get('mail_template')) ? $ldap_server->get('mail_template') : '[' . $ldap_server->get('mail_attr') . ']',
        'direction' => LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER,
        'enabled' => TRUE,
        'prov_events' => array(LDAP_USER_EVENT_CREATE_DRUPAL_USER, LDAP_USER_EVENT_SYNCH_TO_DRUPAL_USER),
        'config_module' => 'ldap_servers',
        'prov_module' => 'ldap_user',
      ) + $available_user_attrs['[property.mail]'];

      if ($ldap_server->get('picture_attr')) {
        if (!isset($available_user_attrs['[property.picture]']) || !is_array($available_user_attrs['[property.picture]'])) {
          $available_user_attrs['[property.picture]'] = array();
        }
        $available_user_attrs['[property.picture]'] = array(
          'name' => 'Property: Picture',
          'source' => '[' . $ldap_server->get('picture_attr') . ']',
          'direction' => LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER,
          'enabled' => TRUE,
          'prov_events' => array(LDAP_USER_EVENT_CREATE_DRUPAL_USER, LDAP_USER_EVENT_SYNCH_TO_DRUPAL_USER),
          'config_module' => 'ldap_servers',
          'prov_module' => 'ldap_user',
        ) + $available_user_attrs['[property.picture]'];
      }
    }
  }
  // debug('available_user_attrs2'); debug($available_user_attrs);
}

/**
 * Flush server static cache.
 */
function ldap_servers_flush_server_cache() {
  // Flush server cache.
  $discard = ldap_servers_get_servers(NULL, 'all', FALSE, TRUE);
}

/**
 * Return ldap server conf objects.
 *
 * @param string $sid
 * @param string $type
 *   'all', 'enabled',.
 * @param bool $flatten
 *   signifies if array or single object returned.  Only works if sid is specified.
 * @param bool $reset
 *   do not use cached or static result.
 *
 * @return - array of server conf object keyed on sid
 *         - single server conf object (if flatten == TRUE)
 */
function ldap_servers_get_servers($sid = NULL, $type = NULL, $flatten = FALSE, $reset = FALSE) {
  if (\Drupal::config('ldap_test.settings')->get('simpletest')) {
    return _ldap_servers_get_simpletest_servers($sid, $type, $flatten, $reset);
  }
  else {
    return _ldap_servers_get_servers($sid, $type, $flatten, $reset);
  }
}

/**
 * See ldap_servers_get_servers().
 */
function _ldap_servers_get_servers($id, $type, $flatten, $reset) {
  if ($id) {
    return Server::load($id);
  }

  $type = ($type) ? $type : 'all';
  if ($reset) {
    $servers = array();
  }
  if (!isset($servers['all'])) {
    $query = \Drupal::entityQuery('ldap_server');
    $ids = $query->execute();
    $servers['all'] = Server::loadMultiple($ids);
  }

  if (!isset($servers['enabled'])) {
    $servers['enabled'] = array();
    foreach ($servers['all'] as $_id => $ldap_server) {
      if ($ldap_server->get('status') == 1) {
        $servers['enabled'][$_id] = $ldap_server;
      }
    }
  }

  if ($id) {
    if (!isset($servers[$type][$id])) {
      return FALSE;
    }
    return ($flatten) ? $servers[$type][$id] : array($id => $servers[$type][$id]);
  }

  if (isset($servers[$type])) {
    return $servers[$type];
  }
}

/**
 * See ldap_servers_get_servers()
 */
function _ldap_servers_get_simpletest_servers($sid, $type = NULL, $flatten, $reset = TRUE) {

  if (!$type) {
    $type = 'all';
  }

  // Two flavors of mock servers exist.  ultimately v2 will be used in all simpletests.
  if (\Drupal::config('ldap_test.settings')->get('simpletest') == 2) {
    $servers['all'] = TestServer::getLdapServerObjects(NULL, 'all', FALSE);
    foreach ($servers['all'] as $_sid => $ldap_server) {
      if ($ldap_server->status == 1) {
        $servers['enabled'][$_sid] = $ldap_server;
      }
    }
  }

  if ($sid) {
    if (!isset($servers[$type][$sid])) {
      return FALSE;
    }
    return ($flatten) ? $servers[$type][$sid] : array($sid => $servers[$type][$sid]);
  }

  if (isset($servers[$type])) {
    return $servers[$type];
  }
}

/**
 *
 */
function ldap_servers_debug($variable) {
  if (\Drupal::config('ldap_test.settings')->get('simpletest') && function_exists('dpm')) {
    dpm($variable);
  }
  else {
    debug($variable);
  }
}

/**
 *
 */
function ldap_servers_cache_clear() {
  $discard = ldap_servers_get_servers(NULL, 'all', FALSE, TRUE);
  if (\Drupal::moduleHandler()->moduleExists('ctools')) {
    ctools_export_load_object_reset('ldap_servers');
  }
}

/**
 * Function to convert microsoft style guids to strings.
 */
function ldap_servers_msguid($value) {

  $hex_string = bin2hex($value);
  // (MS?) GUID are displayed with first three GUID parts as "big endian"
  // Doing this so String value matches what other LDAP tool displays for AD.
  $value = strtoupper(substr($hex_string, 6, 2) . substr($hex_string, 4, 2) .
  substr($hex_string, 2, 2) . substr($hex_string, 0, 2) . '-' .
  substr($hex_string, 10, 2) . substr($hex_string, 8, 2) . '-' .
  substr($hex_string, 14, 2) . substr($hex_string, 12, 2) . '-' .
  substr($hex_string, 16, 4) . '-' . substr($hex_string, 20, 12));

  return $value;
}

/**
 * Create a "binary safe" string for use in LDAP filters.
 *
 * @param $value
 *
 * @return string
 */
function ldap_servers_binary_filter($value) {
  $match = '';
  if (preg_match('/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/i', $value)) {
    // Reconstruct proper "memory" order from (MS?) GUID string.
    $hex_string = str_replace('-', '', $value);
    $value = substr($hex_string, 6, 2) . substr($hex_string, 4, 2) .
      substr($hex_string, 2, 2) . substr($hex_string, 0, 2) .
      substr($hex_string, 10, 2) . substr($hex_string, 8, 2) .
      substr($hex_string, 14, 2) . substr($hex_string, 12, 2) .
      substr($hex_string, 16, 4) . substr($hex_string, 20, 12);
  }

  for ($i = 0; $i < strlen($value); $i = $i + 2) {
    $match .= '\\' . substr($value, $i, 2);
  }

  return $match;
}

/**
 * General binary conversion function for guids
 * tries to determine which approach based on length
 * of string.
 */
function ldap_servers_binary($value) {
  if (strlen($value) == 16) {
    $value = ldap_servers_msguid($value);
  }
  else {
    $value = bin2hex($value);
  }
  return $value;
}

/**
 * @TODO needs caching element.  several modules could potentially call this in the same
 * page request.
 * Currently is called 12 times on user login using LDAP Authorization.
 *
 * @param User $drupal_user
 *   is drupal $user object.
 * @param string $id
 *   is a server id.
 * @param scalar $ldap_context
 *
 * @return array|bool
 */
function ldap_servers_get_user_ldap_data($drupal_user, $id = NULL, $ldap_context = NULL) {
  if (is_object($drupal_user) && property_exists($drupal_user, 'uid') && $authname = LdapUserConf::ldap_user_get_identifier_from_map($drupal_user->id())) {
    $drupal_username = $authname;
  }
  else {
    $drupal_username = (is_object($drupal_user)) ? $drupal_user->getUsername() : $drupal_user;
  }
  // If no explicit $id, find most appropriate one.
  if (\Drupal::moduleHandler()->moduleExists('ldap_user')) {
    if (property_exists($drupal_user, 'ldap_user_puid_sid') &&
        !empty($drupal_user->ldap_user_puid_sid['und'][0]['value'])
      ) {
      $id = $drupal_user->ldap_user_puid_sid['und'][0]['value'];
    }
    else {
      $ldap_user_conf = ldap_user_conf();
      $id = $ldap_user_conf->drupalAcctProvisionServer;
    }
  }
  elseif (!$id) {
    $ldap_servers = ldap_servers_get_servers(NULL, 'enabled');
    if (count($ldap_servers) == 1) {
      $ids = array_keys($ldap_servers);
      $id = $ids[0];
    }
  }

  // Try to retrieve the user from the cache.
  // Key is module name.value name.identifier.
  $cache_key = 'ldap_servers:user_data:' . $drupal_username;
  $cache = \Drupal::cache()->get($cache_key);
  if ($cache && $cache->data) {
    return $cache->data;
  }

  /* @var \Drupal\ldap_servers\Entity\Server $ldap_server*/
  $ldap_server = ($id) ? ldap_servers_get_servers($id, 'enabled', TRUE) : FALSE;

  if ($ldap_server === FALSE) {
    \Drupal::logger('ldap_servers')->error('Failed to load server object %sid in _ldap_servers_get_user_ldap_data', array('%sid' => $id));
    return FALSE;
  }

  $ldap_user = $ldap_server->userUserNameToExistingLdapEntry($drupal_username, $ldap_context);

  if ($ldap_user) {
    $ldap_user['id'] = $id;
    // Set the cache here
    // 5 minutes.
    $cache_expiry = 5 * 60 + time();
    $cache_tags = array('ldap', 'ldap_servers', 'ldap_servers.user_data');
    \Drupal::cache()->set($cache_key, $ldap_user, $cache_expiry, $cache_tags);
  }
  else {
    $ldap_user = FALSE;
  }

  return $ldap_user;
}

/**
 * Implements hook_user_logout().
 */
function ldap_servers_user_logout(AccountProxy $account) {
  // When the user logs out clear the LDAP cached data.
  $cache_key = 'ldap_servers:user_data:' . $account->getUsername();
  if ($cache = \Drupal::cache()->get($cache_key)) {
    \Drupal::cache()->delete($cache_key);
  }
}

/**
 * @param array $attribute_map
 *   for a given attribute in form array('values' => array(), 'data_type' => NULL) as outlined in ldap_user/README.developers.txt.
 * @param enum string $conversion
 *   as type of conversion to do @see ldap_servers_convert_attribute().  e.g. base64_encode, bin2hex, msguid, md5.
 * @param array $values
 *   in form array(<ordinal> => <value> | NULL) where NULL indicates value is needed for provisioning or other operations.
 *
 * @return array $attribute_map with converted values.  If nothing passed in create empty array in proper structure.
 *   array('values' => array(
 *      0 => 'john',
 *      1 => 'johnny'
 *      )
 *   );
 * ))
 */
function ldap_servers_set_attribute_map($attribute = NULL, $conversion = NULL, $values = NULL) {

  $attribute = (is_array($attribute)) ? $attribute : array();
  $attribute['conversion'] = $conversion;
  if (!$values && (!isset($attribute['values']) || !is_array($attribute['values']))) {
    $attribute['values'] = array(0 => NULL);
  }
  // Merge into array overwriting ordinals.
  elseif (is_array($values)) {
    foreach ($values as $ordinal => $value) {
      if ($conversion) {
        $value = ldap_servers_convert_attribute($value, $conversion);
      }
      $attribute['values'][(int) $ordinal] = $value;
    }
  }
  return $attribute;
}

/**
 * @param string $value
 *   as value to be converted.
 * @param string $conversion
 *   such as base64_encode, bin2hex, msguid, md5.
 *
 * @return string
 */
function ldap_servers_convert_attribute($value, $conversion = NULL) {

  if ($conversion) {

    switch ($conversion) {
      case 'base64_encode':
        $value = base64_encode($value);
        break;

      case 'bin2hex':
        $value = bin2hex($value);
        break;

      case 'msguid':
        $value = ldap_servers_msguid($value);
        break;

      case 'binary':
        $value = ldap_servers_binary($value);
        break;

      case 'md5':
        $value = '{md5}' . base64_encode(pack('H*', md5($value)));
        break;
    }

  }

  return $value;
}

/**
 * Disable a logon form if ldap preferences exclude http logon forms.
 *
 * @param array $form
 *    drupal logon form.
 */
function ldap_servers_disable_http_check(&$form) {

  if (\Drupal::config('ldap_servers.settings')->get('ldap_servers_require_ssl_for_credentials') == 1 && @$_SERVER['HTTPS'] != 'on') {
    $tokens = array(
      '%site_name' => \Drupal::config('system.site')->get('name'),
      '%site_contact_link' => \Drupal::config('system.site')->get('mail'),
    );

    if (empty($tokens['%site_contact_link'])) {
      $tokens['%site_contact_link'] = 'the site admin';
    }
    drupal_set_message(t('You are accessing %site_name using an unencrypted connection. For your security,
     %site_name only supports account logins using a secure protocol such as HTTPS. You can switch
     to HTTPS by trying to view this page again after changing the URL in your browser \'s
     location bar to begin with "https" instead of "http". Please contact
      %site_contact_link for help if this error continues.', $tokens), 'error');
    $form['#disabled'] = TRUE;
  }
}

/**
 *
 */
function ldap_servers_ldap_extension_summary($op = 'data') {
  // FIXME: Undefined function
  return _ldap_servers_ldap_extension_summary($op);
}

/**
 *
 */
function ldap_servers_ldap_extension_loaded() {
  return extension_loaded('ldap');
}

/**
 * Implements hook_help().
 */
function ldap_servers_help($route_name, RouteMatchInterface $route_match) {
  $servers_help = '<p>' . t('LDAP Servers store "LDAP server configurations" so other modules can connect to them and leverage their data.') . ' ';
  $servers_help .= t('LDAP Authentication and LDAP Authorization are two such modules. Generally, only one LDAP Server configuration is needed.') . ' ' . '</p>';
  $servers_help .= '<p>' . t('When multiple LDAP server configurations are needed, each is not necessarily a separate physical LDAP server; they may have different binding users or some other configuration difference.') . ' </p>';

  switch ($route_name) {
    case 'ldap_servers.settings':
       return $servers_help;
    case 'help.page.ldap_servers':
      $servers_help .= '<h3>' . t('Configuration - Settings') . '</h3>';
      $servers_help .= '<dl>';
      $servers_help .= '<dt>' . t('REQUIRE HTTPS ON CREDENTIAL PAGES') . '</dt>';
      $servers_help .= '<dd>' . t('If checked, modules using LDAP will not allow credentials to be entered on or submitted to HTTP pages, only HTTPS. This option should be used with an approach to get all logon forms to be HTTPS.') . '</dd>';
      $servers_help .= '<dt>' . t('LOG DETAILED LDAP ACTIONS') . '</dt>';
      $servers_help .= '<dd>' . t('Enables LDAP logging to the Drupal Watchdog system') . '</dd>';
      $servers_help .= '</dl>';
      $servers_help .= '<h3>' . t('Configuration - Servers (List)') . '</h3>';
      $servers_help .= '<dl>';
      $servers_help .= '<dt>' . t('Configuration Table') . '</dt>';
      $servers_help .= '<dd>' . t('Provides a list of currently stored LDAP server configuratins.') . '</dd>';
      $servers_help .= '<h3>' . t('Configuration - Servers (Add LDAP Server Configuration)') . '</h3>';
      $servers_help .= '<dl>';
      $servers_help .= '<dt>' . t('CONNECTION SETTINGS') . '</dt>';
      $servers_help .= '<dd>' . t('Machine name -') . ' </dd>';
      $servers_help .= '<dd>' . t('Name -') . ' </dd>';
      $servers_help .= '<dd>' . t('Enabled -') . ' </dd>';
      $servers_help .= '<dd>' . t('LDAP Server Type') . ' </dd>';
      $servers_help .= '<dd>' . t('LDAP Server -') . ' </dd>';
      $servers_help .= '<dd>' . t('LDAP port -') . ' </dd>';
      $servers_help .= '<dd>' . t('Use Start-TLS -') . ' </dd>';
      $servers_help .= '</dl>';
      $servers_help .= '<dl>';
      $servers_help .= '<dt>' . t('BINDING METHOD') . '</dt>';
      $servers_help .= '<dd>' . t('Binding Method for searches -') . ' </dd>';
      $servers_help .= '<dd>' . t('Service Account -') . ' </dd>';
      $servers_help .= '<dd>' . t('DN for non-anonymous search -') . ' </dd>';
      $servers_help .= '<dd>' . t('Password for non-anonymous search -') . ' </dd>';
      $servers_help .= '<dd>' . t('Clear existing password from database -') . ' </dd>';
      $servers_help .= '</dl>';
      $servers_help .= '<dl>';
      $servers_help .= '<dt>' . t('LDAP USER TO DRUPAL USER RELATIONSHIP') . '</dt>';
      $servers_help .= '<dd>' . t('Base DNs for LDAP Users, Groups, and Other Entries -') . ' </dd>';
      $servers_help .= '<dd>' . t('AuthName Attribute -') . ' </dd>';
      $servers_help .= '<dd>' . t('AccountName Attribute -') . ' </dd>';
      $servers_help .= '<dd>' . t('Email Attribute -') . ' </dd>';
      $servers_help .= '<dd>' . t('Email Template -') . ' </dd>';
      $servers_help .= '<dd>' . t('Persistant and Unique User ID Attribute -') . ' </dd>';
      $servers_help .= '<dd>' . t('Does PUID hold a binary value? -') . ' </dd>';
      $servers_help .= '<dd>' . t('Expression for User DN -') . ' </dd>';
      $servers_help .= '<dd>' . t('PHP to Transform Drupal Login Username to LDAP UserName Attribute -') . ' </dd>';
      $servers_help .= '<dd>' . t('Testing Drupal Username -') . ' </dd>';
      $servers_help .= '<dd>' . t('DN of Testing Username -') . ' </dd>';
      $servers_help .= '</dl>';
      return $servers_help;
    case 'entity.ldap_server.collection':
      $output = '<p>' . t('Setup an LDAP server configuration to be used by other modules such as LDAP Authentication, LDAP Authorization, etc.') . '</p>';
      $output .= '<p>' . t('More than one LDAP server configuration can exist for a physical LDAP server. Multiple configurations for the same physical ldap server are useful in cases such as: (1) different base dn\'s for authentication and authorization and (2) service accounts with different privileges for different purposes.') . '</p>';
      return $output;
    default:
  }
}

/**
 * @return array
 *   List of ldap configuration classes and names.
 */
function ldap_servers_ldap_servers_types() {

  $types['default'] = array(
    'class' => 'DefaultType',
    'name' => t('Default LDAP'),
  );

  $types['ad'] = array(
    'class' => 'ActiveDirectoryType',
    'name' => t('Active Directory'),
  );

  $types['novell_edir'] = array(
    'class' => 'NovellType',
    'name' => t('Novell'),
  );

  $types['openldap'] = array(
    'class' => 'OpenLdapType',
    'name' => t('OpenLDAP'),
  );

  $types['opendir'] = array(
    'class' => 'OpenDirectoryType',
    'name' => t('Apple Open Directory'),
  );

  \Drupal::moduleHandler()->alter('ldap_servers_ldap_types', $types);
  return $types;

}

/**
 * @param string|array
 *  String or array ldap type id or conf array.
 *
 * @return AbstractType
 *   Options for ldap type.
 */
function ldap_servers_get_ldap_type_object($ldap_conf) {

  if (!is_array($ldap_conf)) {
    $ldap_confs = ldap_servers_ldap_servers_types();
    $ldap_conf = $ldap_confs[$ldap_conf];
  }

  $ldap_type_class = new $ldap_conf['class']();
  return $ldap_type_class;

}

/**
 *
 */
function ldap_servers_no_enabled_servers_msg($action) {

  $servers = ldap_servers_get_servers(NULL, 'enabled');
  if (count($servers) == 0) {

    $url = Url::fromRoute('entity.ldap_server.collection');
    $edit_server_link = \Drupal::l(t('@path', array('@path' => 'LDAP Servers')), $url);

    $message = t('At least one LDAP server must configured and <em>enabled</em> before @action. Please go to @link to configure an LDAP server.', array('@action' => $action, '@link' => $edit_server_link));

    drupal_set_message($message, 'warning');
    return $message;
  }
}
